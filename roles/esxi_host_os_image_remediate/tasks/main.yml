---
#- name: Print the VM password
#  debug:
#    msg:
      #- "The VM password is: {{ vsphere_password }}"
      #      - "The VM hostname is: {{ vsphere_hostname }}"
      # - "The VM username is: {{ vsphere_username }}"

- name: Execute PowerShell script to get cluster remediation state
  ansible.builtin.script:
    cmd: >
      files/get-clusterstate.ps1
      -vsphere_hostname "{{ vsphere_hostname }}"
      -vsphere_username "{{ vsphere_username }}"
      -vsphere_password "{{ vsphere_password }}"
      -vsphere_cluster "{{ vsphere_cluster }}"
      -inventory_hostname "{{ inventory_hostname }}"
      -new_host_profile "{{ new_host_profile }}"
    executable: /bin/pwsh
  register: cluster_state_data
  ignore_unreachable: true
  delegate_to: localhost

- name: Display cluster remediation state
  debug:
    msg:
      - "PS script output is: {{ cluster_state_data }}"

- name: Convert the output to a list
  set_fact:
    cluster_state_data: "{{ cluster_state_data.stdout.splitlines() }}"

- name: Debug output list 
  debug:
    msg:
      - "PS script output is: {{ cluster_state_data }}"
      #- "PS script output 0 is: {{ cluster_state_data[0] }}"
      #- "PS script output 1 is: {{ cluster_state_data[1] }}"

- name: Check if reboot required and split the list
  block:
    - name: Check if reboot required and split the list
      set_fact:
        cluster_hosts_state: "{{ cluster_state_data[0] }}"
        cluster_hosts_to_remediate: "{{ cluster_state_data[1:] }}"
      when: cluster_state_data[0] == 'RebootRequired'

        #Debug set one host to remediate
    - name: Debug specify which hosts to remediate
      set_fact:
        cluster_hosts_to_remediate: "['neon01.byu.edu','neon03.byu.edu','neon04.byu.edu']"
        cluster_hosts_state: 'RebootRequired'
        #when: cluster_hosts_state == 'RebootRequired'

    - name: Debug display the list
      debug:
        msg: "{{ cluster_hosts_to_remediate }}"
      when: cluster_hosts_state == 'RebootRequired'

    - name: Debug verify host
      debug:
        msg: "{{ cluster_hosts_to_remediate }}"

- name: Perform tasks to remediate hosts requiring maintenance mode and reboot
  include_tasks: tasks_loop.yml
  loop: "{{ cluster_hosts_to_remediate }}"
  when: cluster_hosts_state == 'RebootRequired'


- name: When cluster is compliant, print message
  debug:
    msg: "Cluster is compliant, nothing to do."
  when: cluster_state_data == 'Compliant'

- name: Fail if host is unreachable
  block:
    - name: Fail if host is unreachable
      ansible.builtin.fail:
        msg: "Host is unreachable"
  when: result.unreachable is defined and result.unreachable | default(false)
